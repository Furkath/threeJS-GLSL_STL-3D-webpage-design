{
  "id": 3905,
  "name": "Fork of New Composed Shader",
  "fragment": "#define F4 0.309016994374947451\n#define PI 3.14159\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float permutations;\nuniform float iterations;\nuniform vec2 uvScale;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform float brightness;\nuniform float speed;\nvarying vec2 vUv;\nvec4 mod289(vec4 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nfloat mod289(float x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 permute(vec4 x) \n                                                        {\n                                                            return mod289(((x * 34.0) + 1.0) * x);\n                                                        }\nfloat permute(float x) \n                                                        {\n                                                            return mod289(((x * 34.0) + 1.0) * x);\n                                                        }\nvec4 taylorInvSqrt(vec4 r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nfloat taylorInvSqrt(float r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nvec4 grad4(float j, vec4 ip) \n                                                        {\n                                                            const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n                                                            vec4 p, s;\n                                                            p.xyz = floor(fract(vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n                                                            p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n                                                            s = vec4(lessThan(p, vec4(0.0)));\n                                                            p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;\n                                                            return p;\n                                                        }\nfloat snoise(vec4 v) \n                                                        {\n                                                            const vec4 C = vec4(0.138196601125011, 0.276393202250021, 0.414589803375032, -0.447213595499958);\n                                                            vec4 i = floor(v + dot(v, vec4(F4)));\n                                                            vec4 x0 = v - i + dot(i, C.xxxx);\n                                                            vec4 i0;\n                                                            vec3 isX = step(x0.yzw, x0.xxx);\n                                                            vec3 isYZ = step(x0.zww, x0.yyz);\n                                                            i0.x = isX.x + isX.y + isX.z;\n                                                            i0.yzw = 1.0 - isX;\n                                                            i0.y += isYZ.x + isYZ.y;\n                                                            i0.zw += 1.0 - isYZ.xy;\n                                                            i0.z += isYZ.z;\n                                                            i0.w += 1.0 - isYZ.z;\n                                                            vec4 i3 = clamp(i0, 0.0, 1.0);\n                                                            vec4 i2 = clamp(i0 - 1.0, 0.0, 1.0);\n                                                            vec4 i1 = clamp(i0 - 2.0, 0.0, 1.0);\n                                                            vec4 x1 = x0 - i1 + C.xxxx;\n                                                            vec4 x2 = x0 - i2 + C.yyyy;\n                                                            vec4 x3 = x0 - i3 + C.zzzz;\n                                                            vec4 x4 = x0 + C.wwww;\n                                                            i = mod289(i);\n                                                            float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n                                                            vec4 j1 = permute(permute(permute(permute(i.w + vec4(i1.w, i2.w, i3.w, 1.0)) + i.z + vec4(i1.z, i2.z, i3.z, 1.0)) + i.y + vec4(i1.y, i2.y, i3.y, 1.0)) + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n                                                            vec4 ip = vec4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);\n                                                            vec4 p0 = grad4(j0, ip);\n                                                            vec4 p1 = grad4(j1.x, ip);\n                                                            vec4 p2 = grad4(j1.y, ip);\n                                                            vec4 p3 = grad4(j1.z, ip);\n                                                            vec4 p4 = grad4(j1.w, ip);\n                                                            vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                            p0 *= norm.x;\n                                                            p1 *= norm.y;\n                                                            p2 *= norm.z;\n                                                            p3 *= norm.w;\n                                                            p4 *= taylorInvSqrt(dot(p4, p4));\n                                                            vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n                                                            vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n                                                            m0 = m0 * m0;\n                                                            m1 = m1 * m1;\n                                                            return (49.0 * (dot(m0 * m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2))) + dot(m1 * m1, vec2(dot(p3, x3), dot(p4, x4)))));\n                                                        }\nfloat hash(float n) \n                                                        {\n                                                            return fract(sin(n) * 93942.234);\n                                                        }\nmat2 m = mat2(0.6, 0.8, -0.8, 0.6);\nfloat fbm(vec4 p) \n                                                        {\n                                                            float f = 0.0;\n                                                            f += 0.5 * snoise(vec4(p.xy * m, p.zw * m));\n                                                            p *= 2.02;\n                                                            f += 0.25 * snoise(vec4(p.xy * m, p.zw * m));\n                                                            p *= 2.01;\n                                                            f += 0.125 * snoise(vec4(p.xy * m, p.zw * m));\n                                                            p *= 2.03;\n                                                            f += 0.0625 * snoise(vec4(p.xy * m, p.zw * m));\n                                                            f /= 0.9375;\n                                                            return f;\n                                                        }\nvec4 Molten_Noise1542198921927_21_main() \n                                                        {\n                                                            vec4 Molten_Noise1542198921927_21_gl_FragColor = vec4(0.0);\n                                                            vec2 p = vUv * uvScale;\n                                                            float elapsed = time * speed * 0.01;\n                                                            float s = vUv.x * uvScale.x;\n                                                            float t = vUv.y * uvScale.y;\n                                                            float multiplier = iterations / (2.0 * PI);\n                                                            float nx = cos(s * 2.0 * PI) * multiplier;\n                                                            float ny = cos(t * 2.0 * PI) * multiplier;\n                                                            float nz = sin(s * 2.0 * PI) * multiplier;\n                                                            float nw = sin(t * 2.0 * PI) * multiplier;\n                                                            vec4 tile4d = vec4(nx, ny, nz, nw);\n                                                            vec2 a = vec2(fbm(tile4d + elapsed * 1.1), fbm(tile4d - elapsed * 1.3));\n                                                            vec2 b = vec2(fbm(tile4d + elapsed * 1.2 + a.x * 2.0), fbm(tile4d - elapsed * 1.2 + a.x * 3.0));\n                                                            float surf = fbm(tile4d + elapsed + length(b) * permutations);\n                                                            vec3 colorOutput = brightness * (((b.x + surf) * color1) + ((b.y + surf) * color2) + ((surf + b.x) * color3));\n                                                            Molten_Noise1542198921927_21_gl_FragColor = vec4(colorOutput, 1.);\n                                                            return Molten_Noise1542198921927_21_gl_FragColor *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_FragColor = Molten_Noise1542198921927_21_main();                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Molten_Noise1542198921927_21_main() \n                                                        {\n                                                            vec4 Molten_Noise1542198921927_21_gl_Position = vec4(0.0);\n                                                            vNormal = normal;\n                                                            vUv = uv;\n                                                            vUv2 = uv2;\n                                                            vPosition = position;\n                                                            Molten_Noise1542198921927_21_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Molten_Noise1542198921927_21_gl_Position *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_Position = Molten_Noise1542198921927_21_main();                                                        }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "uvScale": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "speed": {
      "value": "0.2",
      "type": "f",
      "glslType": "float"
    },
    "color1": {
      "value": {
        "r": 0.7098039215686275,
        "g": 0.3137254901960784,
        "b": 0.8117647058823529
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color2": {
      "value": {
        "r": 0.12941176470588237,
        "g": 0.24313725490196078,
        "b": 0.9803921568627451
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color3": {
      "value": {
        "r": 0.8980392156862745,
        "g": 0.3568627450980392,
        "b": 0.8
      },
      "type": "c",
      "glslType": "vec3"
    },
    "brightness": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "permutations": {
      "value": "10",
      "type": "f",
      "glslType": "float"
    },
    "iterations": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/3905",
  "user": {
    "username": "Chris",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}